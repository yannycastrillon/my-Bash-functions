# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=/Users/yannycastrillon/.oh-my-zsh

export PATH="$HOME/.rbenv/shims:$PATH"
eval "$(rbenv init -)"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)
plugins=(zsh-autosuggestions)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

############################################################
######################## Vim Commands ######################
############################################################
bindkey -v # User vim commands on the terminal

###################################################
##################### aliases #####################
###################################################
alias cwd='cd "$(cat ~/.cwd)"'
alias ls='ls -aGh'

############################################################
#################### Functions #############################
############################################################

export function cd() {
  builtin cd "$@";
  echo "$PWD" > ~/.cwd;
}

# Create file and cd into it.
function mkdircd() {
  mkdir "$1"
  cd "$1"
}

# Manual and open file
function catman() {
  man "$1" | cat
}

# Move files with the same 'extension' from 'source' to 'destination'
function mvbatch() {
  if [[ "$1" == "" || "$2" == "" || "$3" == "" ]]
  then
    echo "1 arg must be an 'extension' ex: jpg"
    echo "2 arg must be the 'source' path ex: ~/Downloads/images/"
    echo "3 arg must be the 'destination (relative path)' path ex: ./app/assets/images/team"
    #  example: mvbatch jpeg ~/Downloads/images/ app/assets/images/team
  else
    # get each file with ext and apply the mv command to a destination.
    for f in $2*.$1 ; do mv "$f" $PWD/$3; done
  fi
}

############################################################
######################## GIT Function ######################
############################################################

# Add the current changes to stage area. Also does commit with message.
function git_ac() {
  if ! [ -z "$1" ];
  then
    git add -A
    git commit -m "$1"
    echo "Commit has been done successfully"
  else
    echo "Provide a commit message!"
  fi
}
# Add git function git_ push origin master automatic.
function git_pom() {
  git push origin master
  echo "Push"
}

# Git 'short log all'. Git log --oneline --decorate --graph --all
function git_sla() {
  git log --oneline --decorate --graph --all
  echo "Short log all"
}

# Git command to search for a specific stream of character on the commit message
function git_glog() {
  git log -E -i --grep "$1"
  echo "Look for specific commit msg"
}

# Show custom git commits custom messages and authors.
function git_pretty() {
  git log --pretty=format:'%C(yellow)%h %C(reset) - %an [%C(green)%ar%C(reset)] => %s'
}

# Unstage the filename
function git_unstage() {
  if ! [ -z "$1" ];
  then
    git reset $1
    echo "Remove from staging area file: $1"
  else
    echo "Please provide filename to be unstaged"
  fi
}

# ^    -> Referes to the parent commit which is previous one.
# HEAD -> current pointer, current branch of the current commit.
# Soft -> Take the branch and point to that commit.
#         Brings you back to the point where we were about to do the commit.

function git_uncommit() {
  git reset --soft HEAD^
}
